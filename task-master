# SEED-MCP: Tool Requirements and Implementation Plan

This document outlines the required Model Context Protocol (MCP) tools for the SEED project, derived from an analysis of the SEED Outline documents. It will be updated incrementally as each section of the SEED Outline is reviewed.

## Analysis of SEED Outline Sections

### Section 1 pt I: SEED Design System

**1. Key Functionalities Identified:**
    - Tenant-specific theming (colors, typography) loaded from Supabase.
    - Logging of various UI events (theme application, button clicks, input changes, modal closures, AI interactions, toast displays, animation triggers) to Supabase.
    - Tenant-specific form validation rules fetched from Supabase.
    - Tenant-specific table column configurations fetched from Supabase.
    - AI-driven input suggestions for UI components, fetched via an `agentRunner`.
    - Client-side offline support for UI actions (`OfflineMutationManager`), potentially requiring server-side processing of queued mutations.

**2. Required MCP Tool Categories & Specific Functions:**

    a. **Supabase Stack Interaction Tools (`tools/supabase/supabase_tools.py`)**
        - `get_tenant_theme(tenant_id)`: Fetches theme data (colors, typography).
        - `log_ui_event(tenant_id, event_type, payload)`: Logs UI events.
        - `get_tenant_validation_rules(tenant_id)`: Fetches form validation rules.
        - `get_tenant_table_config(tenant_id)`: Fetches table column configurations.
        - `get_tenant_icon_set_config(tenant_id)` (Potential): For tenant-specific icon sets if managed via Supabase.
        - `get_tenant_grid_config(tenant_id)` (Potential): For tenant-specific grid configurations if managed via Supabase.

    b. **AI Agent Interaction Tools (`tools/ai_agents/ai_agent_tools.py`)**
        - `get_ai_input_suggestions(tenant_id, current_input_context)`: Interacts with `agentRunner` (e.g., 'WorkflowOptimizer' agent) to fetch input suggestions.

    c. **Offline-First Sync Tools (`tools/offline_sync/offline_sync_tools.py`)** (Potential - depends on offline architecture)
        - `process_offline_mutation_batch(mutations)`: Processes a batch of client-queued mutations.

**3. High-Level Implementation Notes (MCP Perspective):**
    - Define/confirm Supabase table schemas for `tenant_themes`, `ui_events`, `tenant_validation_rules`, `tenant_table_configs`.
    - Implement the Python functions listed above within their respective `_tools.py` files, using the Supabase client for database operations and appropriate methods for agent interaction.
    - Ensure secure data handling, parameter sanitization, and robust error responses.
    - Expose these tool functions through the corresponding FastAPI routers (e.g., `seed-supabase.py`, `seed-ai_agents.py`).

---
## Consolidated MCP Tool List (To be built incrementally)

*(This section will list all identified tools and their functions as analysis progresses)*

---
*This document is actively being updated.*