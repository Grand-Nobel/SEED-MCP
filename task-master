# SEED-MCP: Tool Requirements and Implementation Plan

This document outlines the required Model Context Protocol (MCP) tools for the SEED project, derived from an analysis of the SEED Outline documents. It will be updated incrementally as each section of the SEED Outline is reviewed.

## Analysis of SEED Outline Sections

### Section 1 pt I: SEED Design System

**1. Key Functionalities Identified:**
    - Tenant-specific theming (colors, typography) loaded from Supabase.
    - Logging of various UI events (theme application, button clicks, input changes, modal closures, AI interactions, toast displays, animation triggers) to Supabase.
    - Tenant-specific form validation rules fetched from Supabase.
    - Tenant-specific table column configurations fetched from Supabase.
    - AI-driven input suggestions for UI components, fetched via an `agentRunner`.
    - Client-side offline support for UI actions (`OfflineMutationManager`), potentially requiring server-side processing of queued mutations.

**2. Required MCP Tool Categories & Specific Functions:**

    a. **Supabase Stack Interaction Tools (`tools/supabase/supabase_tools.py`)**
        - `get_tenant_theme(tenant_id)`: Fetches theme data (colors, typography).
        - `log_ui_event(tenant_id, event_type, payload)`: Logs UI events.
        - `get_tenant_validation_rules(tenant_id)`: Fetches form validation rules.
        - `get_tenant_table_config(tenant_id)`: Fetches table column configurations.
        - `get_tenant_icon_set_config(tenant_id)` (Potential): For tenant-specific icon sets if managed via Supabase.
        - `get_tenant_grid_config(tenant_id)` (Potential): For tenant-specific grid configurations if managed via Supabase.

    b. **AI Agent Interaction Tools (`tools/ai_agents/ai_agent_tools.py`)**
        - `get_ai_input_suggestions(tenant_id, current_input_context)`: Interacts with `agentRunner` (e.g., 'WorkflowOptimizer' agent) to fetch input suggestions.

    c. **Offline-First Sync Tools (`tools/offline_sync/offline_sync_tools.py`)** (Potential - depends on offline architecture)
        - `process_offline_mutation_batch(mutations)`: Processes a batch of client-queued mutations.

**3. High-Level Implementation Notes (MCP Perspective):**
    - Define/confirm Supabase table schemas for `tenant_themes`, `ui_events`, `tenant_validation_rules`, `tenant_table_configs`.
    - Implement the Python functions listed above within their respective `_tools.py` files, using the Supabase client for database operations and appropriate methods for agent interaction.
    - Ensure secure data handling, parameter sanitization, and robust error responses.
    - Expose these tool functions through the corresponding FastAPI routers (e.g., `seed-supabase.py`, `seed-ai_agents.py`).

### Section 1 pt II: SEED Design System (Continued - UI Patterns & Accessibility)

**1. Key Functionalities Identified:**
    - Consistent loading state management (`useLoadingState` hook) with UI event logging to Supabase.
    - Reusable drag-and-drop functionality (`useDragDrop` hook) with UI event logging to Supabase.
    - AI interaction elements (`AiThinkingIndicator`, `AiSuggestedActions`) with UI event logging and `agentRunner` interaction for suggestions.
    - Comprehensive accessibility features (Keyboard Navigation, Screen Reader announcements, Color Contrast utilities, Text Resizability, Alt Text utilities).
    - UI event logging to Supabase for accessibility-related events (focus changes, input modality, screen reader announcements, contrast checks, alt text validation, text zoom changes).
    - Fetching tenant-specific accessibility configurations from Supabase.
    - AI-driven alt text generation for images via `agentRunner`.

**2. Required MCP Tool Categories & Specific Functions:**

    a. **Supabase Stack Interaction Tools (`tools/supabase/supabase_tools.py`)**
        - `log_ui_event(tenant_id, event_type, payload)`: (Reinforced) Heavily used for logging various UI and accessibility events.
        - `get_tenant_accessibility_config(tenant_id)`: Fetches accessibility configurations (contrast level, font preferences, alt text guidelines).

    b. **AI Agent Interaction Tools (`tools/ai_agents/ai_agent_tools.py`)**
        - `get_ai_suggested_actions(tenant_id, current_context)`: Interacts with `agentRunner` (e.g., 'ActionSuggester' agent) to fetch suggested UI actions.
        - `generate_ai_alt_text(image_url, image_type, tenant_id)`: Interacts with `agentRunner` (e.g., 'AltTextGenerator' agent) to generate alt text for images.

**3. High-Level Implementation Notes (MCP Perspective):**
    - Ensure `log_ui_event` is robust enough to handle a wide variety of event types and payloads from the design system components.
    - Define/confirm Supabase table schema for `tenant_accessibility`.
    - Implement the new functions in their respective `_tools.py` files.
    - Expose these functions via FastAPI routers.

### Section 2: Technical Infrastructure Enhancements

**1. Key Functionalities Identified:**
    - **Advanced Queueing (RabbitMQ):** Tenant-specific priority queues, DLQs, dynamic batch sizing, AI-driven event prioritization.
    - **Aggressive Caching (In-memory & Redis):** Multi-layered, tenant-isolated caching, AI-driven TTL optimization, Supabase Realtime for cache invalidation.
    - **Database Optimization (PostgreSQL & pgvector):** Tenant-scoped indexes, AI-driven HNSW tuning, tenant-specific table partitioning, read replica routing.
    - **Stateless & Optimized Services:** Tenant-specific service configurations (potentially AI-optimized), service profiling, metrics logging.
    - **System Event/Metric Logging:** Logging various infrastructure-related events and metrics to Supabase.
    - **AI Agent Usage:** For optimizing queue priority, cache TTLs, HNSW parameters, and service configurations.

**2. Required MCP Tool Categories & Specific Functions:**

    a. **Message Queue Interaction Tools (NEW - `tools/message_queues/message_queue_tools.py`)**
        - `initialize_tenant_rabbitmq_queue(tenant_id)`: Sets up tenant-specific queues, DLQs, and exchanges.
        - `publish_to_rabbitmq_queue(tenant_id, event_payload, urgency_level)`: Publishes event, potentially using AI agent for dynamic priority.
        - `get_rabbitmq_queue_depth(tenant_id, queue_name)`: Retrieves current queue depth.
        - `process_rabbitmq_batch(tenant_id)` (Note: May be an internal function for workers rather than a direct MCP tool).

    b. **Caching Interaction Tools (NEW - `tools/caching/caching_tools.py`)**
        - `get_cached_item(tenant_id, cache_key)`: Retrieves item from multi-layer cache (in-memory, Redis).
        - `set_cached_item(tenant_id, cache_key, item_data, custom_ttl=None)`: Sets item in cache, potentially using AI agent for TTL.
        - `invalidate_cache_key(tenant_id, cache_key_pattern)`: Invalidates cache entries.

    c. **Supabase Stack Interaction Tools (`tools/supabase/supabase_tools.py`)**
        - `log_system_event(tenant_id, event_type, payload)`: For infrastructure events (queue init, cache invalidation, index creation, etc.).
        - `log_system_metric(tenant_id, metric_name, value_payload)`: For infrastructure metrics (queue stats, cache stats, query stats, etc.).
        - `get_tenant_service_config(tenant_id)`: Fetches configuration for stateless services.

    d. **Direct Database Interaction Tools (`tools/databases/database_tools.py`)**
        - `create_pg_tenant_index(tenant_id, table_name, column_names, index_type)`: Creates tenant-specific PostgreSQL indexes.
        - `tune_pg_hnsw_index(tenant_id, index_name, ef_construction, m)`: Tunes pgvector HNSW index parameters.
        - `create_pg_tenant_partition(tenant_id, table_name, partition_logic_details)`: Creates tenant-specific table partitions.
        - `execute_pg_query(tenant_id, query_text, params, use_replica=True)`: (Enhanced) Executes PostgreSQL query with explicit read replica option.

    e. **AI Agent Interaction Tools (`tools/ai_agents/ai_agent_tools.py`)**
        - `predict_event_priority(tenant_id, event_details)`: For `QueueOptimizer`.
        - `predict_cache_ttl(tenant_id, cache_key_details)`: For `CacheOptimizer`.
        - `predict_hnsw_params(tenant_id, table_name)`: For `DatabaseOptimizer`.
        - `predict_service_config(tenant_id, service_name, current_config)`: For `ServiceOptimizer`.

    f. **System Command Execution Tools (Existing `execute_command`)**
        - Potentially for triggering service profiling scripts (e.g., `clinic doctor`), though this might be more of a DevOps task.

**3. High-Level Implementation Notes (MCP Perspective):**
    - Create new tool modules for Message Queues and Caching if they don't exist.
    - Implement functions to interact with RabbitMQ (e.g., using `aio_pika` or `pika`).
    - Implement functions to interact with Redis (e.g., using `redis-py`).
    - Extend database tools for specific DDL operations (indexes, partitions) and HNSW tuning.
    - Ensure all AI agent interactions are routed through the generic AI agent tool functions.
    - Define schemas for new Supabase tables: `system_logs`, `system_metrics`, `tenant_services_config`.

### Section 3: Core Operational & Supporting Schema (PostgreSQL + Supabase OSS)

**1. Key Functionalities Identified:**
    - **Database Schema:** Defines numerous tables for core operations (tenants, users, leads, clients, bookings, interactions), agent operations (agent_logs, workflow_definitions, workflow_runs, agent_memory_embeddings, agent_configs), analytics, file metadata, and system/audit logs.
    - **Multi-Tenancy & RLS:** Heavy emphasis on `tenant_id` in all relevant tables and enforcement via PostgreSQL Row Level Security.
    - **Supabase Stack Integration:** Uses Supabase Auth, Realtime, Storage, Edge Functions, and Supavisor.
    - **Vector Storage (pgvector):** `agent_memory_embeddings` table uses pgvector for AI memory.
    - **File Storage:** Metadata in `files` table, blobs in S3-compatible storage via Supabase Storage.
    - **Workflow Engine Support:** Tables `workflow_definitions` and `workflow_runs` support a workflow engine.
    - **Configuration Management:** `agent_configs` table for JSON schemas and agent-specific configurations.
    - **Logging:** Extensive logging to `system_logs`, `audit_logs`, and `agent_logs`.
    - **Billing & Usage Tracking:** `billing_usage` and `billing_tokens` tables.

**2. Required MCP Tool Categories & Specific Functions:**

    a. **Direct Database Interaction Tools (`tools/databases/database_tools.py`)**
        - **Generic CRUD:** `execute_pg_query` (SELECT, INSERT, UPDATE, DELETE for various tables), `execute_pg_transaction`.
        - **Schema Management (DDL):**
            - `manage_pg_enum_type(action, type_name, values)`
            - `manage_pg_table(action, table_definition)` (general DDL)
            - `manage_pg_rls_policy(action, table_name, policy_name, policy_definition)`
        - **Vector DB (pgvector specific):**
            - `insert_pg_vector_embedding(tenant_id, entity_type, entity_id, embedding, metadata, source_text_hash, source_text, priority)`
            - `search_pg_vector_embeddings(tenant_id, query_vector, filters, top_k)`
            - `update_pg_vector_embedding_access(tenant_id, embedding_id, access_timestamp)` (for `last_accessed_at`, `retrieval_count`)
            - `run_pg_vector_gc_job(tenant_id)` (embedding garbage collection)
        - **Specific Table Operations (examples):**
            - `get_user_by_auth_id(auth_id)`
            - `create_lead(tenant_id, lead_data)`
            - `get_bookings_for_staff(tenant_id, staff_id, time_range)`
            - `log_interaction(tenant_id, interaction_data)`
            - `log_agent_execution(tenant_id, agent_log_data)` (for `agent_logs`)
            - `log_billing_token_usage(tenant_id, token_usage_data)` (for `billing_tokens`)
            - `get_file_metadata(tenant_id, file_id_or_path)`
            - `create_file_metadata(tenant_id, file_metadata)`
            - `delete_file_metadata(tenant_id, file_id)` (must also trigger blob deletion)

    b. **Supabase Stack Interaction Tools (`tools/supabase/supabase_tools.py`)**
        - `manage_supabase_user(action, user_details)` (e.g., create user in `auth.users` and link to `public.users`)
        - `get_file_storage_url(action, tenant_id, file_path, content_type=None)` (for upload/download presigned URLs)
        - `delete_file_from_supabase_storage(tenant_id, storage_path)` (called by DB tool or directly)
        - `invoke_edge_function(function_name, payload)` (reconfirmed, e.g., for dynamic partition creation)

    c. **Workflow Management Tools (`tools/workflow_management/workflow_management_tools.py`)**
        - `create_workflow_definition(tenant_id, name, description, trigger_type, trigger_config, structure_json)`
        - `update_workflow_definition(tenant_id, workflow_def_id, updates_json)`
        - `get_workflow_definition(tenant_id, workflow_def_id)`
        - `activate_workflow_definition(tenant_id, workflow_def_id, is_active_flag)`
        - `trigger_workflow_run(tenant_id, workflow_def_id, trigger_event_data, input_context)`
        - `get_workflow_run_details(tenant_id, workflow_run_id)`
        - `update_workflow_run(tenant_id, workflow_run_id, status, current_step_id, steps_state_updates, error_log_updates)`

    d. **Settings Management Tools (`tools/settings_management/settings_management_tools.py`)**
        - `get_agent_config_value(tenant_id, agent_name, config_key, version_tag=None)`
        - `set_agent_config_value(tenant_id, agent_name, config_key, config_value, version_tag=None, description=None)`
        - `manage_json_schema(action, schema_name, version, schema_definition_json)` (for `agent_configs` table storing JSON schemas)
        - `get_tenant_settings(tenant_id)` (from `tenants.settings` JSONB)
        - `update_tenant_settings(tenant_id, settings_payload)`

    e. **Agent Log Review Tools (`tools/agent_log_review/agent_log_review_tools.py`)**
        - `query_agent_logs(tenant_id, filters)` (e.g., by agent_name, status, time_range, related_entity)
        - `get_agent_log_details(tenant_id, agent_log_id)`
        - `submit_agent_log_feedback(tenant_id, agent_log_id, user_id, rating, comment)` (populates `agent_shadow_action_responses`)

**3. High-Level Implementation Notes (MCP Perspective):**
    - This section defines the bulk of the database interaction logic. MCP tools must provide a secure, tenant-aware abstraction layer.
    - RLS policies are critical and assumed to be handled at the DB level, but MCP tools must operate with user contexts that allow RLS to function correctly (e.g., passing JWT claims or setting session variables).
    - Encryption of sensitive data in JSONB fields (e.g., `agent_logs.input_payload`, `agent_configs.config_value`) needs to be handled, potentially within the MCP tool functions before DB insertion or after retrieval, using pgcrypto or application-level encryption with keys from a secrets manager.
    - For tables like `agent_memory_embeddings`, `interactions`, `agent_logs`, `system_logs`, `audit_logs`, which can grow very large, MCP tools should support efficient querying, possibly with pagination.
    - The `files` table metadata operations need to be coordinated with actual Supabase Storage blob operations.

### Section 4: Access Layer & API Orchestration

**1. Key Functionalities Identified:**
    - **Unified API Gateway:** Using Caddy/Traefik/NGINX for routing, TLS, and initial JWT validation.
    - **GraphQL API (Hasura):** Auto-generated schema, Realtime subscriptions, RLS enforcement via JWT claims. Custom resolvers/mutations via PG Functions or Hasura Actions.
    - **gRPC API (Buf + Connect-Go/Twirp):** Low-latency, structured contracts for AI agents, mobile apps, internal services. REST/JSON interface via gRPC Gateway. JWT authentication and RLS context setting. Streaming for bulk data/logs.
    - **WebSocket Layer (Supabase Realtime):** Realtime UI updates, agent console feeds, workflow event broadcasting. JWT authentication and RLS filtering.
    - **Edge Functions (Supabase):** Stateless logic for webhook handlers, agent/embedding triggers, presigned URL generation, public booking endpoints. JWT authentication or API key for internal, strict security for public.
    - **Standardized Error Structure & API Conventions:** Consistent error responses and conventions for pagination, filtering, sorting across API layers.
    - **API Security (Zero-Trust):** JWT validation, RLS context setting, input validation, output encoding, rate limiting, session management.
    - **Schema Governance & Versioning:** Strategies for gRPC, GraphQL, REST, Edge Functions, and JSON Schemas.
    - **AI/Agent Interaction:** Agents prefer gRPC or Edge Functions. GraphQL for exploration. WebSockets for real-time triggers.
    - **Monitoring Integration:** API layers capture metrics (latency, count, errors) for `system_metrics` or external systems.
    - **GraphQL Query for Agent Capabilities:** `agentUICapabilities` query to fetch agent manifests from `agent_registry`.

**2. Required MCP Tool Categories & Specific Functions:**

    a. **Direct Database Interaction Tools (`tools/databases/database_tools.py`)**
        - `get_agent_registry_capabilities(agent_names_list)`: Fetches UI capabilities and other manifest data from `agent_registry` table to support the `agentUICapabilities` GraphQL query.
        - (Reinforced) Generic query execution (`execute_pg_query`) will be heavily used by gRPC service implementations and custom GraphQL resolvers (if implemented as PG functions).
        - (Reinforced) RLS policy management tools (`manage_pg_rls_policy`) are crucial for the security model described.

    b. **Supabase Stack Interaction Tools (`tools/supabase/supabase_tools.py`)**
        - `invoke_edge_function(function_name, payload)`: (Reinforced) Used for various tasks like webhook handling, agent triggers, presigned URL generation.
        - `get_file_storage_url(action, tenant_id, file_path, content_type=None)`: (Reinforced) For generating presigned URLs, likely called by an Edge Function.

    c. **Message Queue Interaction Tools (`tools/message_queues/message_queue_tools.py`)**
        - (Reinforced) Edge Functions acting as webhook handlers or agent triggers might publish events to RabbitMQ using these tools.

    d. **Workflow Management Tools (`tools/workflow_management/workflow_management_tools.py`)**
        - (Reinforced) Edge Functions or gRPC services might trigger workflows using these tools.

    e. **AI Agent Interaction Tools (`tools/ai_agents/ai_agent_tools.py`)**
        - (Reinforced) gRPC services and Edge Functions will be primary consumers of AI agent tools.

**3. High-Level Implementation Notes (MCP Perspective):**
    - MCP tools must be designed to be easily callable from gRPC service implementations and Supabase Edge Functions.
    - Tool functions should return data and errors in a way that aligns with the standardized API error structures and conventions (Section 4.7).
    - Ensure MCP tools operate correctly within the described Zero-Trust security model, relying on JWT claims and RLS context set by the calling API layers.
    - The implementation of `get_agent_registry_capabilities` needs to query the `agent_registry` table (schema details for this table might be in a later section or need to be assumed/defined).

### Section 5: Execution Pipeline & Orchestration Engine

**1. Key Functionalities Identified:**
    - **Event Bus (Redis Streams):** Standardized event publishing and consumption with persistence, consumer groups, and priority channels.
    - **Orchestrator Engine:** Consumes events, uses routing rules (from `event_routing_rules` table) to dispatch tasks to workflows or AI agents. Manages workflow state.
    - **Vector Bridge:** Retrieves context from vector stores (pgvector, Pinecone, Weaviate) to augment agent input payloads.
    - **Agent Runner Pool Coordination:** Uses `agent_registry` table for runner discovery and load balancing. Standardized agent execution contract.
    - **Agent Coordination Protocol (ACP):** Hybrid policy for conflict resolution using `hybrid_policy_configs` and logging to `acp_ledger`.
    - **Vector Index Tuning:** Bayesian optimization for HNSW parameters (`ef_search`, `m`), re-indexing based on data drift. Storing configs in `vector_policy_configs`.
    - **Federated Learning:** Differential privacy for model updates, secure aggregation (AWS Nitro Enclaves), robust algorithms, personalization. Uses `priority_models` and `global_priority_models` tables.

**2. Required MCP Tool Categories & Specific Functions:**

    a. **Message Queue Interaction Tools (`tools/message_queues/message_queue_tools.py`)**
        - `publish_to_redis_stream(stream_name, event_payload_dict)`: Publishes a standardized event.
        - `consume_from_redis_stream(stream_name, consumer_group, consumer_name, count, block_ms)`: Consumes events.
        - `acknowledge_redis_stream_message(stream_name, consumer_group, message_id)`: Acknowledges processed message.
        - (RabbitMQ functions remain if used for other purposes).

    b. **Direct Database Interaction Tools (`tools/databases/database_tools.py`)**
        - `get_event_routing_rules(event_type, source_criteria)`: Fetches rules from `event_routing_rules`.
        - `get_agent_runner_details(agent_type_filter)`: Queries `agent_registry`.
        - `register_agent_runner_instance(runner_details)`: Adds/updates runner in `agent_registry`.
        - `get_acp_hybrid_policy_config(tenant_id)`: Fetches from `hybrid_policy_configs`.
        - `log_acp_ledger_entry(event_id, tenant_id, agent_id, task_id, resolution, explanation_json)`: Inserts into `acp_ledger`.
        - `get_vector_policy_config(tenant_id)`: Fetches from `vector_policy_configs` (new table).
        - `update_vector_policy_config(tenant_id, ef_search, m)`: Updates `vector_policy_configs`.
        - `get_priority_model_weight(tenant_id, agent_id, task_type)`: From `priority_models`.
        - `update_priority_model_weight(tenant_id, agent_id, task_type, weight)`: To `priority_models`.
        - `get_all_priority_models_for_aggregation()`: Fetches all tenant models.
        - `store_global_priority_model_weights(model_id, agent_id, task_type, weight)`: To `global_priority_models`.
        - (Reinforced) `search_pg_vector_embeddings` for Vector Bridge.
        - (Reinforced) CRUD for `workflow_runs`, `steps_state`.

    c. **Vector Database Interaction Tools (`tools/vector_databases/vector_databases_tools.py`)**
        - (Reinforced) `search_vectors` (pgvector, Pinecone, Weaviate) used by Vector Bridge.
        - `trigger_vector_reindex(database_type, collection_name_or_index_name)`: For data drift.

    d. **AI Agent Interaction Tools (`tools/ai_agents/ai_agent_tools.py`)**
        - `dispatch_agent_task_to_runner(runner_details, execution_contract)`: Sends task to a specific agent runner.
        - (Potentially) Specialized agent calls for Bayesian optimization or federated learning steps if these are managed by dedicated AI agents.

    e. **Settings Management Tools (`tools/settings_management/settings_management_tools.py`)**
        - (Reinforced) Managing configurations for ACP policies, vector tuning, federated learning if stored centrally.

    f. **Cloud Service Interaction Tools (NEW - `tools/cloud_services/aws_tools.py` or similar)**
        - `aggregate_with_nitro_enclave(data_to_aggregate, aggregation_config)`: For secure aggregation in federated learning.

**3. High-Level Implementation Notes (MCP Perspective):**
    - Implement robust Redis Streams interaction logic in `message_queue_tools.py`.
    - Define schemas and implement CRUD/query functions for new tables: `event_routing_rules`, `agent_registry`, `hybrid_policy_configs`, `acp_ledger`, `vector_policy_configs` (new), `priority_models`, `global_priority_models`.
    - The Vector Bridge logic will heavily rely on `vector_database_tools.py` and `database_tools.py`.
    - Orchestrator logic will use Message Queue, Database, AI Agent, and Workflow tools extensively.
    - If AWS Nitro Enclaves are used, a new tool category for AWS interactions will be needed.

---
## Consolidated MCP Tool List (To be built incrementally)

**1. Supabase Stack Interaction Tools (`tools/supabase/supabase_tools.py`)**
    - `get_tenant_theme(tenant_id)`
    - `log_ui_event(tenant_id, event_type, payload)`
    - `get_tenant_validation_rules(tenant_id)`
    - `get_tenant_table_config(tenant_id)`
    - `get_tenant_accessibility_config(tenant_id)`
    - `log_system_event(tenant_id, event_type, payload)`
    - `log_system_metric(tenant_id, metric_name, value_payload)`
    - `get_tenant_service_config(tenant_id)`
    - `manage_supabase_user(action, user_details)`
    - `get_file_storage_url(action, tenant_id, file_path, content_type=None)`
    - `delete_file_from_supabase_storage(tenant_id, storage_path)`
    - `invoke_edge_function(function_name, payload)`
    - `get_tenant_icon_set_config(tenant_id)` (Potential)
    - `get_tenant_grid_config(tenant_id)` (Potential)

**2. AI Agent Interaction Tools (`tools/ai_agents/ai_agent_tools.py`)**
    - `get_ai_input_suggestions(tenant_id, current_input_context)`
    - `get_ai_suggested_actions(tenant_id, current_context)`
    - `generate_ai_alt_text(image_url, image_type, tenant_id)`
    - `predict_event_priority(tenant_id, event_details)`
    - `predict_cache_ttl(tenant_id, cache_key_details)`
    - `predict_hnsw_params(tenant_id, table_name)`
    - `predict_service_config(tenant_id, service_name, current_config)`
    - `dispatch_agent_task_to_runner(runner_details, execution_contract)`

**3. Offline-First Sync Tools (`tools/offline_sync/offline_sync_tools.py`)** (Potential)
    - `process_offline_mutation_batch(mutations)`

**4. Message Queue Interaction Tools (`tools/message_queues/message_queue_tools.py`)**
    - `initialize_tenant_rabbitmq_queue(tenant_id)` (If RabbitMQ still used for specific parts)
    - `publish_to_rabbitmq_queue(tenant_id, event_payload, urgency_level)` (If RabbitMQ still used)
    - `get_rabbitmq_queue_depth(tenant_id, queue_name)` (If RabbitMQ still used)
    - `publish_to_redis_stream(stream_name, event_payload_dict)`
    - `consume_from_redis_stream(stream_name, consumer_group, consumer_name, count, block_ms)`
    - `acknowledge_redis_stream_message(stream_name, consumer_group, message_id)`

**5. Caching Interaction Tools (`tools/caching/caching_tools.py`)**
    - `get_cached_item(tenant_id, cache_key)`
    - `set_cached_item(tenant_id, cache_key, item_data, custom_ttl=None)`
    - `invalidate_cache_key(tenant_id, cache_key_pattern)`

**6. Direct Database Interaction Tools (`tools/databases/database_tools.py`)**
    - `execute_pg_query(tenant_id, query_text, params, use_replica=True)`
    - `execute_pg_transaction(tenant_id, list_of_queries_and_params)`
    - `manage_pg_enum_type(action, type_name, values)`
    - `manage_pg_table(action, table_definition)`
    - `manage_pg_rls_policy(action, table_name, policy_name, policy_definition)`
    - `create_pg_tenant_index(tenant_id, table_name, column_names, index_type)`
    - `tune_pg_hnsw_index(tenant_id, index_name, ef_construction, m)`
    - `create_pg_tenant_partition(tenant_id, table_name, partition_logic_details)`
    - `insert_pg_vector_embedding(tenant_id, entity_type, entity_id, embedding, metadata, source_text_hash, source_text, priority)`
    - `search_pg_vector_embeddings(tenant_id, query_vector, filters, top_k)`
    - `update_pg_vector_embedding_access(tenant_id, embedding_id, access_timestamp)`
    - `run_pg_vector_gc_job(tenant_id)`
    - `get_agent_registry_capabilities(agent_names_list)`
    - `get_event_routing_rules(event_type, source_criteria)`
    - `get_agent_runner_details(agent_type_filter)`
    - `register_agent_runner_instance(runner_details)`
    - `get_acp_hybrid_policy_config(tenant_id)`
    - `log_acp_ledger_entry(event_id, tenant_id, agent_id, task_id, resolution, explanation_json)`
    - `get_vector_policy_config(tenant_id)`
    - `update_vector_policy_config(tenant_id, ef_search, m)`
    - `get_priority_model_weight(tenant_id, agent_id, task_type)`
    - `update_priority_model_weight(tenant_id, agent_id, task_type, weight)`
    - `get_all_priority_models_for_aggregation()`
    - `store_global_priority_model_weights(model_id, agent_id, task_type, weight)`
    - Specific CRUD helpers for core tables (e.g., `create_lead`, `get_bookings_for_staff`, `log_interaction`, `log_agent_execution`, `log_billing_token_usage`, `get_file_metadata`, `create_file_metadata`, `delete_file_metadata`).

**7. Workflow Management Tools (`tools/workflow_management/workflow_management_tools.py`)**
    - `create_workflow_definition(tenant_id, name, description, trigger_type, trigger_config, structure_json)`
    - `update_workflow_definition(tenant_id, workflow_def_id, updates_json)`
    - `get_workflow_definition(tenant_id, workflow_def_id)`
    - `activate_workflow_definition(tenant_id, workflow_def_id, is_active_flag)`
    - `trigger_workflow_run(tenant_id, workflow_def_id, trigger_event_data, input_context)`
    - `get_workflow_run_details(tenant_id, workflow_run_id)`
    - `update_workflow_run(tenant_id, workflow_run_id, status, current_step_id, steps_state_updates, error_log_updates)`

**8. Settings Management Tools (`tools/settings_management/settings_management_tools.py`)**
    - `get_agent_config_value(tenant_id, agent_name, config_key, version_tag=None)`
    - `set_agent_config_value(tenant_id, agent_name, config_key, config_value, version_tag=None, description=None)`
    - `manage_json_schema(action, schema_name, version, schema_definition_json)`
    - `get_tenant_settings(tenant_id)`
    - `update_tenant_settings(tenant_id, settings_payload)`
    - (Reinforced) Functions for ACP, vector tuning, federated learning configs.

**9. Agent Log Review Tools (`tools/agent_log_review/agent_log_review_tools.py`)**
    - `query_agent_logs(tenant_id, filters)`
    - `get_agent_log_details(tenant_id, agent_log_id)`
    - `submit_agent_log_feedback(tenant_id, agent_log_id, user_id, rating, comment)`

**10. Vector Database Interaction Tools (`tools/vector_databases/vector_databases_tools.py`)**
    - `insert_vectors(...)` (Note: pgvector specific version is in Database tools, this is for external DBs if any)
    - `search_vectors(...)` (Note: pgvector specific version is in Database tools, this is for external DBs if any, used by Vector Bridge)
    - `manage_collection(...)` (For external DBs)
    - `trigger_vector_reindex(database_type, collection_name_or_index_name)`

**11. Cloud Service Interaction Tools (NEW - `tools/cloud_services/aws_tools.py` or similar)**
    - `aggregate_with_nitro_enclave(data_to_aggregate, aggregation_config)` (If AWS Nitro Enclaves are used)

*(Further tool categories and functions will be added as analysis progresses.)*

---
*This document is actively being updated.*