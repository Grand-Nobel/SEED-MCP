# SEED-MCP: Tool Requirements and Implementation Plan

This document outlines the required Model Context Protocol (MCP) tools for the SEED project, derived from an analysis of the SEED Outline documents. It will be updated incrementally as each section of the SEED Outline is reviewed.

## Analysis of SEED Outline Sections

### Section 1 pt I: SEED Design System

**1. Key Functionalities Identified:**
    - Tenant-specific theming (colors, typography) loaded from Supabase.
    - Logging of various UI events (theme application, button clicks, input changes, modal closures, AI interactions, toast displays, animation triggers) to Supabase.
    - Tenant-specific form validation rules fetched from Supabase.
    - Tenant-specific table column configurations fetched from Supabase.
    - AI-driven input suggestions for UI components, fetched via an `agentRunner`.
    - Client-side offline support for UI actions (`OfflineMutationManager`), potentially requiring server-side processing of queued mutations.

**2. Required MCP Tool Categories & Specific Functions:**

    a. **Supabase Stack Interaction Tools (`tools/supabase/supabase_tools.py`)**
        - `get_tenant_theme(tenant_id)`: Fetches theme data (colors, typography).
        - `log_ui_event(tenant_id, event_type, payload)`: Logs UI events.
        - `get_tenant_validation_rules(tenant_id)`: Fetches form validation rules.
        - `get_tenant_table_config(tenant_id)`: Fetches table column configurations.
        - `get_tenant_icon_set_config(tenant_id)` (Potential): For tenant-specific icon sets if managed via Supabase.
        - `get_tenant_grid_config(tenant_id)` (Potential): For tenant-specific grid configurations if managed via Supabase.

    b. **AI Agent Interaction Tools (`tools/ai_agents/ai_agent_tools.py`)**
        - `get_ai_input_suggestions(tenant_id, current_input_context)`: Interacts with `agentRunner` (e.g., 'WorkflowOptimizer' agent) to fetch input suggestions.

    c. **Offline-First Sync Tools (`tools/offline_sync/offline_sync_tools.py`)** (Potential - depends on offline architecture)
        - `process_offline_mutation_batch(mutations)`: Processes a batch of client-queued mutations.

**3. High-Level Implementation Notes (MCP Perspective):**
    - Define/confirm Supabase table schemas for `tenant_themes`, `ui_events`, `tenant_validation_rules`, `tenant_table_configs`.
    - Implement the Python functions listed above within their respective `_tools.py` files, using the Supabase client for database operations and appropriate methods for agent interaction.
    - Ensure secure data handling, parameter sanitization, and robust error responses.
    - Expose these tool functions through the corresponding FastAPI routers (e.g., `seed-supabase.py`, `seed-ai_agents.py`).

### Section 1 pt II: SEED Design System (Continued - UI Patterns & Accessibility)

**1. Key Functionalities Identified:**
    - Consistent loading state management (`useLoadingState` hook) with UI event logging to Supabase.
    - Reusable drag-and-drop functionality (`useDragDrop` hook) with UI event logging to Supabase.
    - AI interaction elements (`AiThinkingIndicator`, `AiSuggestedActions`) with UI event logging and `agentRunner` interaction for suggestions.
    - Comprehensive accessibility features (Keyboard Navigation, Screen Reader announcements, Color Contrast utilities, Text Resizability, Alt Text utilities).
    - UI event logging to Supabase for accessibility-related events (focus changes, input modality, screen reader announcements, contrast checks, alt text validation, text zoom changes).
    - Fetching tenant-specific accessibility configurations from Supabase.
    - AI-driven alt text generation for images via `agentRunner`.

**2. Required MCP Tool Categories & Specific Functions:**

    a. **Supabase Stack Interaction Tools (`tools/supabase/supabase_tools.py`)**
        - `log_ui_event(tenant_id, event_type, payload)`: (Reinforced) Heavily used for logging various UI and accessibility events.
        - `get_tenant_accessibility_config(tenant_id)`: Fetches accessibility configurations (contrast level, font preferences, alt text guidelines).

    b. **AI Agent Interaction Tools (`tools/ai_agents/ai_agent_tools.py`)**
        - `get_ai_suggested_actions(tenant_id, current_context)`: Interacts with `agentRunner` (e.g., 'ActionSuggester' agent) to fetch suggested UI actions.
        - `generate_ai_alt_text(image_url, image_type, tenant_id)`: Interacts with `agentRunner` (e.g., 'AltTextGenerator' agent) to generate alt text for images.

**3. High-Level Implementation Notes (MCP Perspective):**
    - Ensure `log_ui_event` is robust enough to handle a wide variety of event types and payloads from the design system components.
    - Define/confirm Supabase table schema for `tenant_accessibility`.
    - Implement the new functions in their respective `_tools.py` files.
    - Expose these functions via FastAPI routers.

---
## Consolidated MCP Tool List (To be built incrementally)

**1. Supabase Stack Interaction Tools (`tools/supabase/supabase_tools.py`)**
    - `get_tenant_theme(tenant_id)`
    - `log_ui_event(tenant_id, event_type, payload)`
    - `get_tenant_validation_rules(tenant_id)`
    - `get_tenant_table_config(tenant_id)`
    - `get_tenant_accessibility_config(tenant_id)`
    - `get_tenant_icon_set_config(tenant_id)` (Potential)
    - `get_tenant_grid_config(tenant_id)` (Potential)

**2. AI Agent Interaction Tools (`tools/ai_agents/ai_agent_tools.py`)**
    - `get_ai_input_suggestions(tenant_id, current_input_context)`
    - `get_ai_suggested_actions(tenant_id, current_context)`
    - `generate_ai_alt_text(image_url, image_type, tenant_id)`

**3. Offline-First Sync Tools (`tools/offline_sync/offline_sync_tools.py`)** (Potential)
    - `process_offline_mutation_batch(mutations)`

*(Further tool categories and functions will be added as analysis progresses)*

---
*This document is actively being updated.*